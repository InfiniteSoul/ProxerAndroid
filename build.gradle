import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript { scriptHandler ->
    apply from: "${projectDir}/gradle/versions.gradle"
    apply from: "${projectDir}/gradle/repositories.gradle", to: scriptHandler

    dependencies {
        // Manually set the R8 and D8 version, to get latest improvements fast.
        classpath "com.android.tools:r8:$r8Version"

        classpath "com.android.tools.build:gradle:${androidPluginVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektPluginVersion"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktlintPluginVersion"
        classpath "com.github.ben-manes:gradle-versions-plugin:$versionsPluginVersion"
        classpath "com.novoda:gradle-android-command-plugin:$androidCommandPluginVersion"
    }
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"

apply plugin: "com.github.ben-manes.versions"
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: "com.novoda.android-command"

apply from: "${projectDir}/gradle/utils.gradle"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    ndkVersion rootProject.ext.ndkVersion

    dexOptions {
        preDexLibraries !isCI()
    }

    defaultConfig {
        applicationId "me.proxer.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode appVersionMajor * 1000000 + appVersionMinor * 10000 + appVersionPatch * 100
        versionName "$appVersionMajor.$appVersionMinor.$appVersionPatch"

        vectorDrawables.useSupportLibrary true
        resConfigs "de"
    }

    sourceSets {
        main {
            java.srcDirs += "src/main/kotlin"
        }

        debug {
            java.srcDirs += "src/debug/kotlin"
        }

        release {
            java.srcDirs += "src/release/kotlin"
        }

        logRelease {
            setRoot "src/release"

            java.srcDirs = release.java.srcDirs
        }
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    signingConfigs {
        if (shouldSign()) {
            release {
                storeFile file(getFromSecrets("RELEASE_STORE_FILE"))
                storePassword getFromSecrets("RELEASE_STORE_PASSWORD")
                keyAlias getFromSecrets("RELEASE_KEY_ALIAS")
                keyPassword getFromSecrets("RELEASE_KEY_PASSWORD")
            }
        }
    }

    buildTypes {
        if (!shouldSign() && !isCI()) {
            logger.warn("This build will not be signed because it is missing the keystore info. Please add " +
                    "values for \"RELEASE_STORE_FILE\", \"RELEASE_STORE_PASSWORD\", \"RELEASE_KEY_ALIAS\" and " +
                    "\"RELEASE_KEY_PASSWORD\" to your secrets.properties file if you want the apk to be signed.")
        }

        debug {
            multiDexEnabled true

            ndk { abiFilters "arm64-v8a", "armeabi-v7a", "x86_64", "x86" }

            versionNameSuffix = "-debug-${getGitHash()}"
            buildConfigField "String", "PROXER_API_KEY", "\"${getFromSecrets("PROXER_API_KEY")}\""
            buildConfigField "boolean", "LOG", "Boolean.parseBoolean(\"true\")"
        }

        release {
            postprocessing {
                removeUnusedCode true
                removeUnusedResources true
                obfuscate true
                optimizeCode true
                proguardFile "config/shrinker/shrinker-rules.pro"
            }

            multiDexEnabled true

            ndk { abiFilters "arm64-v8a", "armeabi-v7a", "x86_64", "x86" }

            buildConfigField "String", "PROXER_API_KEY", "\"${getFromSecrets("PROXER_API_KEY")}\""
            buildConfigField "boolean", "LOG", "Boolean.parseBoolean(\"false\")"

            if (shouldSign()) {
                signingConfig signingConfigs.release
            }
        }

        logRelease {
            postprocessing {
                removeUnusedCode true
                removeUnusedResources true
                obfuscate true
                optimizeCode true
                proguardFile "config/shrinker/shrinker-rules.pro"
            }

            multiDexEnabled true

            ndk { abiFilters "arm64-v8a", "armeabi-v7a", "x86_64", "x86" }

            versionNameSuffix = "-logRelease-${getGitHash()}"
            buildConfigField "String", "PROXER_API_KEY", "\"${getFromSecrets("PROXER_API_KEY")}\""
            buildConfigField "boolean", "LOG", "Boolean.parseBoolean(\"true\")"

            if (shouldSign()) {
                signingConfig signingConfigs.release
            }
        }
    }

    lintOptions {
        mkdir("$buildDir/reports/lint")

        warningsAsErrors = true
        checkReleaseBuilds = false

        lintConfig file("$rootDir/config/lint/lint.xml")
        xmlOutput file("$buildDir/reports/lint/lint-results.xml")
        htmlOutput file("$buildDir/reports/lint/lint-results.html")
    }

    packagingOptions {
        exclude "META-INF/*.kotlin_module"
        exclude "META-INF/*.version"
        exclude "META-INF/rxkotlin.properties"
        exclude "META-INF/proguard/**"
        exclude "META-INF/README.md"
        exclude "kotlin/**"
        exclude "kotlinx/**"
        exclude "third_party/**"
        exclude "jsr305_annotations/**"
        exclude "error_prone/**"
        exclude "protobuf.meta"
        exclude "build-data.properties"
        exclude "androidsupportmultidexversion.txt"
        exclude "play-services-*.properties"
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    applicationVariants.all { variant ->
        def suffix = variant.buildType.name == "release" ? "-release" : ""

        variant.outputs.all {
            outputFileName = "app-${variant.versionName}${suffix}.apk"
        }
    }
}

apply from: "${projectDir}/gradle/repositories.gradle"
apply from: "${projectDir}/gradle/dependencies.gradle"

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == "com.squareup.okhttp3") {
            details.useTarget group: "com.github.rubengees.okhttp", name: details.requested.name,
                    version: rootProject.ext.okHttpVersion

            details.because "use forked version of okhttp with support for legacy Android APIs"
        }
    }
}

tasks.withType(KotlinCompile).all {
    kotlinOptions {
        allWarningsAsErrors = true
        jvmTarget = javaVersion.toString()
        freeCompilerArgs = ["-Xjsr305=strict", "-progressive", "-Xnew-inference"]
    }
}

kapt {
    useBuildCache = true
}

detekt {
    version = detektPluginVersion
    parallel = true
    failFast = true

    config = files("$projectDir/config/detekt/detekt.yml")
    input = files("$projectDir/src/main/kotlin")

    reports {
        xml.destination = file("$buildDir/reports/detekt/detekt.xml")
        html.destination = file("$buildDir/reports/detekt/detekt.html")
    }
}

ktlint {
    reporters = [ReporterType.CHECKSTYLE]
}

wrapper {
    gradleVersion rootProject.ext.gradleVersion
}
